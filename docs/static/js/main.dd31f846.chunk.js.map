{"version":3,"sources":["components/shared/Header.tsx","components/shared/PageTitle.tsx","components/home/Home.tsx","models/Recipe.js","models/Ingredients.js","Services/GreenBeanAPIService.js","components/searchPage/SearchPage.js","components/addRecipePage/IngredientAdd.js","components/addRecipePage/AddRecipeForm.js","components/addRecipePage/AddRecipe.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","exact","to","PageTitle","props","id","title","Home","RecipeAddModel","name","descr","picture","preptime","cooktime","instructions","ingredientslist","email","password","this","Ingredient","GreenBeanAPIService","CreateNewRecipe","recipe","fetch","method","headers","mode","body","then","response","json","data","console","log","SearchForRecipeByName","SearchTerm","a","APIResult","SearchForRecipeByIngredient","List","ListArray","split","IngredientsListArray","i","length","newIngredient","push","FormatedRequestBody","RealFormatedRequestBody","JSON","stringify","SearchPage","useState","recipeResults","setRecipeResults","SearchAPIByName","document","getElementById","value","recipes","SearchAPIByIngredient","type","placeholder","onClick","map","index","key","IngredientAdd","ingredientArray","setIngredientArray","setName","amount","setAmount","unit","setUnit","class","onChange","event","target","Number","ingredient","addIngredient","newArray","filter","removeIngredient","onSubmit","AddRecipeForm","htmlFor","theIngredientList","recipeSubmission","recipeJson","AddRecipe","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dd31f846.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"../../css/w3.css\";\n\nconst Header = () => {\n  return (\n    <nav className=\"w3-bar\">\n      <NavLink exact className=\"w3-bar-item w3-white w3-button w3-hover-green\" to=\"/\">\n        Home\n      </NavLink>\n      <NavLink className=\"w3-bar-item w3-white w3-button w3-hover-green\" to=\"/search\">\n        Search\n      </NavLink>\n      <NavLink className=\"w3-bar-item w3-white w3-button w3-hover-green\" to=\"/new\">\n        Add Recipe\n      </NavLink>\n    </nav>\n  );\n};\n\nexport default Header;","import * as React from \"react\";\n\ninterface PageProps {\n    title: string;\n}\n\nconst PageTitle : React.FunctionComponent<PageProps> = (props) => {\n  return (\n    <>\n      <div id=\"title\" className=\"w3-container w3-green\">\n        <h1>{props.title}</h1>\n      </div>\n    </>\n  );\n};\n\nexport default PageTitle;\n","import * as React from \"react\";\nimport \"../../css/w3.css\";\nimport PageTitle from \"../shared/PageTitle\";\n\nconst Home = () => {\n  return (\n    <>\n      <PageTitle title={\"Welcome Home\"}/>\n      <div id=\"content-area\" className=\"w3-container\">\n        <p>this is where the home page goes</p>\n      </div>\n    </>\n  );\n};\n\nexport default Home;"," export default class RecipeAddModel {\n    constructor(name, descr,picture,preptime,cooktime,instructions,ingredientslist,email,password){\n        this.name = name;\n        this.descr = descr;\n        this.picture = picture;\n        this.preptime = preptime;\n        this.cooktime= cooktime;\n        this.instructions = instructions;\n        this.ingredientslist = ingredientslist;\n        this.email = email;\n        this.password = password;        \n    }\n}","export default class Ingredient {\n    constructor(name){\n        this.name = name;  \n    }\n}","import RecipeAddModel from \"../models/Recipe\";\nimport Ingredient from \"../models/Ingredients\"\nconst GreenBeanAPIService={\n     CreateNewRecipe: function(recipe){\n        fetch(\"https://api.greenbeancooking.com/createrecipe\",{\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n            // 'Content-Type': 'application/x-www-form-urlencoded',\n          },\n          mode: 'cors',\n          body: recipe\n        }).then(response=>response.json()).then(data=>console.log(data))\n      },\n      SearchForRecipeByName: async function(SearchTerm){\n          let APIResult = await fetch(`https://api.greenbeancooking.com/searchrecipebyname/${SearchTerm}`).then(response=>response.json())\n          return APIResult;\n      },\n      SearchForRecipeByIngredient: async function(List){\n          let ListArray = List.split(',')\n\n          var IngredientsListArray = []\n          \n          for(let i = 0; i < ListArray.length; i++){\n            let newIngredient = new Ingredient(ListArray[i])\n            IngredientsListArray.push(newIngredient);\n          }\n\n          let FormatedRequestBody = {\"IngredientsList\":IngredientsListArray};\n          let RealFormatedRequestBody = JSON.stringify(FormatedRequestBody);\n          const settings = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            mode: 'cors',\n            body: RealFormatedRequestBody\n          };\n          let APIResult = fetch(\"https://api.greenbeancooking.com/getrecipebyingredientslist\",settings).then(response=>response.json())\n          return APIResult;\n      }\n}\n\nexport default GreenBeanAPIService","import React, {useState} from \"react\";\nimport PageTitle from \"../shared/PageTitle\";\nimport GreenBeanAPIService from \"../../Services/GreenBeanAPIService\"\n\nconst SearchPage = () => {\n  const [recipeResults, setRecipeResults] = useState([]);\n  const SearchAPIByName = async ()=>{\n    let SearchTerm = document.getElementById(\"nameSearchBox\").value;\n    let recipes = await GreenBeanAPIService.SearchForRecipeByName(SearchTerm);\n    setRecipeResults(recipes);\n  }\n  const SearchAPIByIngredient = async ()=>{\n    let SearchTerm = document.getElementById(\"ingredientSearchBox\").value;\n    let recipes = await GreenBeanAPIService.SearchForRecipeByIngredient(SearchTerm);\n    console.log(recipes)\n    setRecipeResults(recipes);\n  }\n  return (\n    <>\n      <PageTitle title={\"Search Page\"}/>\n      <div id=\"content-area\" className=\"w3-container\">\n      </div>\n      <input id=\"nameSearchBox\" className=\"w3-input w3-border\" type=\"text\" placeholder=\"search\"/>\n      <button onClick={()=>SearchAPIByName()} className=\"w3-button w3-green \">search</button>\n      <input id=\"ingredientSearchBox\" className=\"w3-input w3-border\" type=\"text\" placeholder=\"search\"/>\n      <button onClick={()=>SearchAPIByIngredient()} className=\"w3-button w3-green \">search</button>\n      <ul>\n        {recipeResults.map((recipe, index) => (\n          <div key={index}>\n            <li >{recipe.name}</li>\n            <li>{recipe.descr}</li>\n          </div>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nexport default SearchPage;\n","import React, {useState} from \"react\";\n\nconst IngredientAdd = props => {\n  const [ingredientArray, setIngredientArray] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [amount, setAmount] = useState(0);\n  const [unit, setUnit] = useState(\"\");\n\n  const removeIngredient = (ingredient) => {\n      let newArray = ingredientArray.filter(i => i != ingredient);\n      setIngredientArray(newArray);\n  }\n\n  const addIngredient = () => {\n      let ingredient = {name:\"\",amount:0,unit:\"\"};\n      ingredient.name = name\n      ingredient.amount = amount;\n      ingredient.unit = unit\n      setIngredientArray([ingredient, ...ingredientArray])\n  }\n\n  return (\n    <>\n      <div class=\"w3-row\">\n        <input  class=\"w3-input w3-quarter w3-border\" onChange={(event) => setName(event.target.value)} type=\"text\" placeholder=\"name\" value={name}/>\n        <input  class=\"w3-input w3-quarter w3-border\" onChange={(event) => setAmount(Number(event.target.value))} type=\"number\" placeholder=\"amount\" value={amount}/>\n        <input  class=\"w3-input w3-quarter w3-border\" onChange={(event) => setUnit(event.target.value)} type=\"text\" placeholder=\"unit\" value={unit}/>\n        <button class = \"w3-btn w3-hover-green\"onClick={() => addIngredient()}>Add</button>\n      </div>\n      {ingredientArray.map((ingredient) => (\n        <div >\n          <span>\n            {ingredient.name} {ingredient.amount} {ingredient.unit}/s\n          </span>\n          <button class=\"w3-button w3-hover-red\"onClick={()=>removeIngredient(ingredient)}>remove</button>\n          <br />\n        </div>\n      ))}\n\n      <button class=\"w3-btn w3-green \" onClick={() => props.onSubmit(ingredientArray)}>create recipe</button>\n    </>\n  );\n};\n\nexport default IngredientAdd;\n","import React from \"react\";\nimport IngredientAdd from \"./IngredientAdd\";\nimport RecipeAddModel from \"../../models/Recipe\"\nimport GreenBeanAPIService from \"../../Services/GreenBeanAPIService\"\nconst AddRecipeForm = () => {\n  const AddRecipe = (theIngredientList) => {\n    let name = document.getElementById(\"name\").value;\n    let descr = document.getElementById('description').value;\n    let picture = document.getElementById('picture').value;\n    let preptime= document.getElementById('prep-time').value;\n    let cooktime= document.getElementById('cook-time').value;\n    let instructions = document.getElementById('instructions').value;\n    let email = \"kyler.daybell96@gmail.com\"\n    let password = \"9479\"\n    let ingredientsList = theIngredientList;\n    let recipeSubmission = new RecipeAddModel(name,descr,picture,preptime,cooktime,instructions,ingredientsList,email,password );\n    let recipeJson = JSON.stringify(recipeSubmission);\n    GreenBeanAPIService.CreateNewRecipe(recipeJson);\n  }\n  return (\n    <>\n      \n        <legend>Add a new Recipe:</legend>\n        <label htmlFor=\"name\">Name:</label>\n        <input class=\"w3-input w3-border\" id=\"name\" type=\"text\" />\n        <br />\n        <label htmlFor=\"description\">Description:</label>\n        <input class=\"w3-input w3-border\" id=\"description\" type=\"text\" />\n        <br />\n        <label htmlFor=\"picture\">Picture:</label>\n        <input id=\"picture\" type=\"file\" />\n        <br />\n        <label htmlFor=\"prep-time\">Prep-Time:</label>\n        <input class=\"w3-input w3-border\" id=\"prep-time\" type=\"text\" />\n        <br />\n        <label htmlFor=\"cook-time\">Cook-Time:</label>\n        <input class=\"w3-input w3-border\" id=\"cook-time\" type=\"text\" />\n        <br />\n        <label htmlFor=\"instructions\">Instructions:</label>\n        <input class=\"w3-input w3-border\" id=\"instructions\" type=\"text\" />\n        <br />\n        \n    \n        <IngredientAdd onSubmit={AddRecipe}/>\n\n\n        \n    </>\n  );\n};\n\nexport default AddRecipeForm;\n","import * as React from \"react\";\nimport PageTitle from \"../shared/PageTitle\";\nimport AddRecipeForm from \"./AddRecipeForm\";\n\nconst AddRecipe = () => {\n  return (\n    <>\n      <PageTitle title={\"Add a New Recipe\"}/>\n      <AddRecipeForm />\n    </>\n  );\n};\n\nexport default AddRecipe;","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport Header from \"./components/shared/Header\";\nimport Home from \"./components/home/Home\";\nimport SearchPage from \"./components/searchPage/SearchPage\";\nimport AddRecipe from \"./components/addRecipePage/AddRecipe\";\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/search\" component={SearchPage} />\n        <Route path=\"/new\" component={AddRecipe} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {HashRouter} from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}